import { Router } from "express";

export const adminUiRouter = Router();

adminUiRouter.get("/", (_req, res) => {
  res.type("html").send(`<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>NC Admin</title>
<style>
  :root { color-scheme: light dark; }
  * { box-sizing: border-box; }
  body { font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; background: #0b0b0b; color: #e8e8e8; }
  .wrap { max-width: 1080px; margin: 28px auto; padding: 0 16px 64px; }
  h1 { margin: 0 0 18px; font-weight: 700; letter-spacing: -0.02em; }
  .grid2 { display: grid; grid-template-columns: minmax(0,1.2fr) minmax(0,0.8fr); gap: 16px; align-items: start; }
  .card { background: #121212; border: 1px solid #242424; border-radius: 14px; padding: 16px; }
  .card h3 { margin: 0 0 12px; font-size: 15px; font-weight: 600; }
  .section-title { margin: 20px 0 8px; text-transform: uppercase; letter-spacing: 0.12em; font-size: 11px; color: #8d8d8d; }
  label { font-size: 12px; color: #9aa0a6; display:block; margin-bottom:6px; }
  input, select { width: 100%; background: #0f0f0f; color: #f2f2f2; border: 1px solid #2a2a2a; border-radius: 10px; padding: 8px 10px; font-size: 13px; }
  input[type="datetime-local"] { padding: 7px 8px; }
  .row { display: grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap: 10px; }
  .btn { padding: 8px 12px; border-radius: 10px; border: 1px solid #2a2a2a; background:#1a1a1a; color:#fff; cursor:pointer; font-size:13px; transition: background 0.2s ease; }
  .btn:hover { background:#222; }
  .btn.primary { background:#f5f5f5; color:#000; border-color:#f5f5f5; }
  .btn.small { padding: 6px 8px; font-size: 12px; }
  .btn.danger { border-color:#ff6b6b; color:#ff6b6b; }
  .btnline { display:flex; gap:8px; flex-wrap:wrap; }
  .list { display:grid; gap:8px; margin-top:12px; }
  .rowItem { display:grid; grid-template-columns: minmax(0,1fr) 88px 96px 140px; gap:10px; align-items:center; padding:10px 12px; border:1px solid #1f1f1f; border-radius:12px; background:#0f0f0f; }
  .pi { display:flex; align-items:center; gap:12px; min-width:0; }
  .pi img { width:48px; height:48px; border-radius:10px; object-fit:cover; background:#1c1c1c; }
  .title { font-weight:600; font-size:13px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
  .id { color:#8e8e8e; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; font-size:11px; margin-top:2px; }
.price {
  font-size: 13px;
  font-weight: 600;
  color: #bcbcbc;
  text-align: right;
  margin-left: auto; /* pushes it to the far right */
  padding-right: 6px; /* adjust for small rightward shift */
}

.qtyWrap {
  display: flex;
  align-items: center;
  gap: 6px;
  margin-left: -8px; /* move quantity box slightly left */
}

.qtyWrap input {
  width: 76px;
  text-align: right;
}
  .actions { display:flex; gap:6px; justify-content:flex-end; }
  pre { background:#0f0f0f; padding:12px; border-radius:12px; border:1px solid #242424; overflow:auto; font-size:12px; line-height:1.5; max-height:220px; }
  table { width:100%; border-collapse:collapse; font-size:12px; }
  th, td { padding:8px 6px; border-bottom:1px solid #1f1f1f; text-align:left; }
  th { font-weight:500; color:#bcbcbc; text-transform:uppercase; font-size:11px; letter-spacing:0.08em; }
  tbody tr:hover { background:#161616; }
  .totals { display:flex; justify-content:space-between; font-size:12px; margin-top:8px; color:#bcbcbc; }
  .muted { color:#808080; font-size:12px; }
  @media (max-width: 860px) {
    .grid2 { grid-template-columns: 1fr; }
    .rowItem { grid-template-columns: minmax(0,1fr); grid-template-rows:auto auto auto auto; }
    .price, .qtyWrap, .actions { justify-self:flex-start; }
  }
</style>
</head>
<body>
  <div class="wrap">
    <h1>NC Admin</h1>

    <div class="grid2">
      <div class="card">
        <h3>Build drop</h3>
        <div class="row">
          <div>
            <label>Admin key (x-admin-key)</label>
            <input id="adminKey" type="password" placeholder="super-secret-key" autocomplete="off" />
          </div>
          <div>
            <label>Start time (local)</label>
            <input id="startAt" type="datetime-local" />
            <div class="muted">Leave blank for now</div>
          </div>
          <div>
            <label>Duration (minutes)</label>
            <input id="dur" type="number" value="120" min="5" />
          </div>
        </div>

        <div style="margin-top:16px;display:flex;justify-content:space-between;align-items:center;">
          <strong>Include products</strong>
          <div class="btnline">
            <button class="btn small" id="preset50" type="button">Preset 50 ea</button>
            <button class="btn small" id="preset10" type="button">Preset 10 ea</button>
            <button class="btn small" id="selectAll" type="button">Select all</button>
            <button class="btn small" id="selectNone" type="button">Clear</button>
          </div>
        </div>

        <div id="productList" class="list"></div>

        <div class="btnline" style="margin-top:18px;">
          <button class="btn primary" id="btnLiveNow" type="button">Go live now</button>
          <button class="btn" id="btnSchedule" type="button">Schedule manual drop</button>
          <button class="btn" id="btnState" type="button">Refresh state</button>
          <button class="btn danger" id="btnEnd" type="button">End current drop</button>
        </div>
      </div>

      <div class="card">
        <h3>Add product</h3>
        <div class="row" style="margin-top:6px;">
          <div><label>Product ID</label><input id="np_id" placeholder="tee-cream" /></div>
          <div><label>Title</label><input id="np_title" placeholder="Logo Tee - Cream" /></div>
          <div><label>Price (cents)</label><input id="np_price" type="number" placeholder="3500" /></div>
          <div><label>Image URL (optional)</label><input id="np_image" placeholder="/uploads/tee-cream.png" /></div>
        </div>
        <div class="btnline" style="margin-top:10px;">
          <button class="btn primary" id="btnAddProd" type="button">Add product</button>
        </div>

        <div class="section-title">State</div>
        <pre id="out">Click "Refresh state"</pre>

        <div class="section-title">Predictions</div>
        <pre id="pred">Loading...</pre>

        <div class="section-title">Auto-drop</div>
        <div class="row" style="margin-top:6px;">
          <label style="display:flex;align-items:center;gap:8px;">
            <input id="ad_enabled" type="checkbox" style="width:auto;accent-color:#0ff;" />
            Enable auto-drop
          </label>
          <div><label>Start velocity (items/hr, 10m)</label><input id="ad_start" type="number" value="15" /></div>
          <div><label>Stay live threshold</label><input id="ad_stay" type="number" value="5" /></div>
          <div><label>Duration (minutes)</label><input id="ad_dur" type="number" value="120" /></div>
          <div><label>Initial qty per item</label><input id="ad_qty" type="number" value="50" /></div>
        </div>
        <div class="btnline" style="margin-top:10px;">
          <button class="btn" id="ad_save" type="button">Save auto-drop</button>
        </div>

        <div class="section-title">Sales (last 200)</div>
        <div id="salesWrap">
          <div class="muted">Load sales with admin key.</div>
        </div>
      </div>
    </div>
  </div>

<script>
(() => {
  const keyInput = document.getElementById("adminKey");
  const productList = document.getElementById("productList");
  const statePre = document.getElementById("out");
  const predPre = document.getElementById("pred");
  const salesWrap = document.getElementById("salesWrap");

  const storedKey = window.localStorage.getItem("nc_admin_key");
  if (storedKey) keyInput.value = storedKey;

  const dropQty = {};
  const qtyInputs = new Map();
  let products = [];

  function getKey() {
    return keyInput.value.trim();
  }

  function requireKey() {
    const key = getKey();
    if (!key) {
      alert("Enter your admin key first.");
      throw new Error("Missing admin key");
    }
    window.localStorage.setItem("nc_admin_key", key);
    return key;
  }

  async function apiJson(path, init = {}) {
    const key = requireKey();
    const headers = new Headers(init.headers || {});
    headers.set("x-admin-key", key);
    headers.set("Accept", "application/json");
    let body = init.body;
    if (body && !(body instanceof FormData) && typeof body !== "string") {
      headers.set("Content-Type", "application/json");
      body = JSON.stringify(body);
    }
    const res = await fetch(path, { ...init, headers, body });
    const data = await res.json().catch(() => ({}));
    if (!res.ok) {
      const msg = data && data.error ? data.error : res.statusText;
      throw new Error(msg);
    }
    return data;
  }

  function escapeHtml(str) {
    return str.replace(/[&<>"]/g, (ch) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;" }[ch] || ch));
  }

  function buildQtyPayload() {
    const selected = {};
    let total = 0;
    for (const [id, qty] of Object.entries(dropQty)) {
      const value = Number.isFinite(qty) ? qty : 0;
      if (value > 0) {
        selected[id] = value;
        total += value;
      }
    }
    return { selected, total };
  }

  function syncInputs(targetValue) {
    qtyInputs.forEach((input, id) => {
      dropQty[id] = targetValue(id);
      input.value = String(dropQty[id]);
    });
  }

  async function refreshProducts() {
    try {
      const data = await apiJson("/api/admin/products");
      products = Array.isArray(data.products) ? data.products : [];
      renderProducts();
    } catch (err) {
      productList.innerHTML = '<div class="muted">' + escapeHtml(err.message || String(err)) + "</div>";
    }
  }

  function renderProducts() {
    productList.innerHTML = "";
    qtyInputs.clear();
    if (!products.length) {
      productList.innerHTML = '<div class="muted">No products yet.</div>';
      return;
    }

    for (const p of products) {
      if (typeof dropQty[p.id] !== "number") dropQty[p.id] = 0;

      const row = document.createElement("div");
      row.className = "rowItem";

      const info = document.createElement("div");
      info.className = "pi";
      const img = document.createElement("img");
      img.src = p.imageUrl || "/placeholder.png";
      img.alt = p.title;
      img.onerror = () => { img.src = "/placeholder.png"; };
      const meta = document.createElement("div");
      meta.innerHTML = '<div class="title">' + escapeHtml(p.title) + "</div><div class=\"id\">" + escapeHtml(p.id) + "</div>";
      info.appendChild(img);
      info.appendChild(meta);
      row.appendChild(info);

      const price = document.createElement("div");
      price.className = "price";
      price.textContent = "$" + (p.priceCents / 100).toFixed(2);
      row.appendChild(price);

      const qtyWrap = document.createElement("div");
      qtyWrap.className = "qtyWrap";
      const qtyInput = document.createElement("input");
      qtyInput.type = "number";
      qtyInput.min = "0";
      qtyInput.value = String(dropQty[p.id] ?? 0);
      qtyInput.className = "qty-input";
      qtyInput.addEventListener("input", () => {
        const val = Math.max(0, Math.floor(Number(qtyInput.value) || 0));
        dropQty[p.id] = val;
        qtyInput.value = String(val);
      });
      qtyWrap.appendChild(qtyInput);
      row.appendChild(qtyWrap);
      qtyInputs.set(p.id, qtyInput);

      const actions = document.createElement("div");
      actions.className = "actions";

      const uploadInput = document.createElement("input");
      uploadInput.type = "file";
      uploadInput.accept = "image/*";
      uploadInput.style.display = "none";
      uploadInput.addEventListener("change", () => handleUpload(p.id, uploadInput));

      const btnUpload = document.createElement("button");
      btnUpload.className = "btn small";
      btnUpload.type = "button";
      btnUpload.textContent = "Upload";
      btnUpload.addEventListener("click", () => uploadInput.click());

      const btnEdit = document.createElement("button");
      btnEdit.className = "btn small";
      btnEdit.type = "button";
      btnEdit.textContent = "Edit";
      btnEdit.addEventListener("click", () => handleEdit(p));

      const btnDelete = document.createElement("button");
      btnDelete.className = "btn small danger";
      btnDelete.type = "button";
      btnDelete.textContent = "Delete";
      btnDelete.addEventListener("click", () => handleDelete(p.id));

      actions.appendChild(uploadInput);
      actions.appendChild(btnUpload);
      actions.appendChild(btnEdit);
      actions.appendChild(btnDelete);
      row.appendChild(actions);

      productList.appendChild(row);
    }
  }

  async function handleUpload(productId, input) {
    try {
      requireKey();
      if (!input.files || !input.files.length) return;
      const fd = new FormData();
      fd.append("file", input.files[0]);
      const res = await fetch("/api/admin/upload-image", {
        method: "POST",
        headers: { "x-admin-key": getKey() },
        body: fd,
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok || !data.url) {
        throw new Error(data.error || "Upload failed");
      }
      await apiJson("/api/admin/products/" + encodeURIComponent(productId), {
        method: "PATCH",
        body: { imageUrl: data.url },
      });
      await refreshProducts();
    } catch (err) {
      alert(err.message || String(err));
    } finally {
      input.value = "";
    }
  }

  async function handleEdit(product) {
    try {
      const title = prompt("Update title", product.title);
      if (title === null) return;
      const priceInput = prompt("Update price (USD)", (product.priceCents / 100).toFixed(2));
      if (priceInput === null) return;
      const price = Math.round(Number(priceInput) * 100);
      if (!Number.isFinite(price) || price <= 0) {
        alert("Invalid price");
        return;
      }
      await apiJson("/api/admin/products/" + encodeURIComponent(product.id), {
        method: "PATCH",
        body: { title: title.trim(), priceCents: price },
      });
      await refreshProducts();
    } catch (err) {
      alert(err.message || String(err));
    }
  }

  async function handleDelete(productId) {
    if (!confirm("Delete product '" + productId + "'?")) return;
    try {
      await apiJson("/api/admin/products/" + encodeURIComponent(productId), { method: "DELETE" });
      delete dropQty[productId];
      await refreshProducts();
    } catch (err) {
      alert(err.message || String(err));
    }
  }

  async function refreshState() {
    try {
      const state = await apiJson("/api/admin/state");
      statePre.textContent = JSON.stringify(state, null, 2);
    } catch (err) {
      statePre.textContent = err.message || String(err);
    }
  }

  async function refreshPred() {
    try {
      const res = await fetch("/api/predict");
      const data = await res.json();
      predPre.textContent = JSON.stringify({
        generated_at: data.generated_at,
        next_drop_projection: data.next_drop_projection ?? null,
        products: Array.isArray(data.products) ? data.products : [],
      }, null, 2);
    } catch (err) {
      predPre.textContent = err.message || String(err);
    }
  }

  async function loadAutoDrop() {
    try {
      const cfg = await apiJson("/api/admin/autodrop");
      document.getElementById("ad_enabled").checked = !!cfg.enabled;
      document.getElementById("ad_start").value = cfg.minVelocityToStart ?? 15;
      document.getElementById("ad_stay").value = cfg.minVelocityToStayLive ?? 5;
      document.getElementById("ad_dur").value = cfg.defaultDurationMinutes ?? 120;
      document.getElementById("ad_qty").value = cfg.initialQty ?? 50;
    } catch (err) {
      console.warn(err);
    }
  }

  async function refreshSales() {
    try {
      const data = await apiJson("/api/admin/sales?limit=200");
      const rows = Array.isArray(data.sales) ? data.sales : [];
      const totals = data.totals || { count: 0, items: 0, grossCents: 0 };
      if (!rows.length) {
        salesWrap.innerHTML = '<div class="muted">No sales yet.</div>';
        return;
      }
      let html = '<table><thead><tr><th>ID</th><th>Product</th><th>Qty</th><th>Price</th><th>When</th></tr></thead><tbody>';
      for (const row of rows) {
        html += "<tr><td>" + escapeHtml(row.id || "") + "</td><td>" + escapeHtml(row.productId || "") + "</td><td>" + row.qty + "</td><td>$" + (row.priceCents / 100).toFixed(2) + "</td><td>" + escapeHtml(row.ts || "") + "</td></tr>";
      }
      html += "</tbody></table>";
      html += '<div class="totals"><span>' + totals.count + ' orders / ' + totals.items + ' items</span><span>$' + (totals.grossCents / 100).toFixed(2) + '</span></div>';
      salesWrap.innerHTML = html;
    } catch (err) {
      salesWrap.innerHTML = '<div class="muted">' + escapeHtml(err.message || String(err)) + "</div>";
    }
  }

  document.getElementById("preset50").addEventListener("click", () =>
    syncInputs(() => 50)
  );
  document.getElementById("preset10").addEventListener("click", () =>
    syncInputs(() => 10)
  );
  document.getElementById("selectAll").addEventListener("click", () =>
    syncInputs((id) => dropQty[id] > 0 ? dropQty[id] : 1)
  );
  document.getElementById("selectNone").addEventListener("click", () =>
    syncInputs(() => 0)
  );

  document.getElementById("btnLiveNow").addEventListener("click", async () => {
    try {
      const { selected, total } = buildQtyPayload();
      if (!Object.keys(selected).length) {
        alert("Set at least one quantity above zero.");
        return;
      }
      const resp = await apiJson("/api/admin/drop/live-now", {
        method: "POST",
        body: { qty: selected },
      });
      statePre.textContent = JSON.stringify(resp, null, 2);
      await refreshState();
    } catch (err) {
      alert(err.message || String(err));
    }
  });

  document.getElementById("btnSchedule").addEventListener("click", async () => {
    try {
      const { selected } = buildQtyPayload();
      if (!Object.keys(selected).length) {
        alert("Set at least one quantity above zero.");
        return;
      }
      const startVal = document.getElementById("startAt").value;
      const durationVal = Number(document.getElementById("dur").value || 120);
      const startsAt = startVal ? new Date(startVal).toISOString() : "now";
      const body = {
        startsAt,
        durationMinutes: Number.isFinite(durationVal) && durationVal > 0 ? Math.floor(durationVal) : 120,
        initialQty: selected,
      };
      const resp = await apiJson("/api/admin/drop/manual", {
        method: "POST",
        body,
      });
      statePre.textContent = JSON.stringify(resp, null, 2);
      await refreshState();
    } catch (err) {
      alert(err.message || String(err));
    }
  });

  document.getElementById("btnState").addEventListener("click", () => {
    refreshState();
    refreshProducts();
    refreshSales();
    loadAutoDrop();
  });

  document.getElementById("btnEnd").addEventListener("click", async () => {
    if (!confirm("End the current drop?")) return;
    try {
      const resp = await apiJson("/api/admin/drop/end", { method: "POST" });
      statePre.textContent = JSON.stringify(resp, null, 2);
      await refreshState();
    } catch (err) {
      alert(err.message || String(err));
    }
  });

  document.getElementById("btnAddProd").addEventListener("click", async () => {
    try {
      const id = document.getElementById("np_id").value.trim();
      const title = document.getElementById("np_title").value.trim();
      const priceCents = Number(document.getElementById("np_price").value.trim());
      const imageUrl = document.getElementById("np_image").value.trim();
      if (!id || !title || !Number.isFinite(priceCents)) {
        alert("Fill all fields.");
        return;
      }
      await apiJson("/api/admin/products", {
        method: "POST",
        body: {
          id,
          title,
          priceCents: Math.round(priceCents),
          imageUrl: imageUrl || undefined,
        },
      });
      document.getElementById("np_id").value = "";
      document.getElementById("np_title").value = "";
      document.getElementById("np_price").value = "";
      document.getElementById("np_image").value = "";
      dropQty[id] = 0;
      await refreshProducts();
    } catch (err) {
      alert(err.message || String(err));
    }
  });

  document.getElementById("ad_save").addEventListener("click", async () => {
    try {
      const body = {
        enabled: document.getElementById("ad_enabled").checked,
        minVelocityToStart: Number(document.getElementById("ad_start").value || 15),
        minVelocityToStayLive: Number(document.getElementById("ad_stay").value || 5),
        defaultDurationMinutes: Number(document.getElementById("ad_dur").value || 120),
        initialQty: Number(document.getElementById("ad_qty").value || 50),
      };
      const resp = await apiJson("/api/admin/autodrop", {
        method: "POST",
        body,
      });
      alert("Saved.");
      console.info(resp);
    } catch (err) {
      alert(err.message || String(err));
    }
  });

  keyInput.addEventListener("change", () => {
    const val = keyInput.value.trim();
    window.localStorage.setItem("nc_admin_key", val);
    if (val) {
      refreshProducts();
      refreshState();
      refreshSales();
      loadAutoDrop();
    }
  });

  if (storedKey) {
    refreshProducts();
    refreshState();
    refreshSales();
    loadAutoDrop();
  }

  refreshPred();
  setInterval(refreshPred, 15000);
})();
</script>
</body>
</html>`);
});

